#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4952
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Gateway.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="GatewayDB")]
	public partial class GatewayDbContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertConversationLog(Gateway.Data.Entities.ConversationLog instance);
    partial void UpdateConversationLog(Gateway.Data.Entities.ConversationLog instance);
    partial void DeleteConversationLog(Gateway.Data.Entities.ConversationLog instance);
    partial void InsertEnquiryRequestLog(Gateway.Data.Entities.EnquiryRequestLog instance);
    partial void UpdateEnquiryRequestLog(Gateway.Data.Entities.EnquiryRequestLog instance);
    partial void DeleteEnquiryRequestLog(Gateway.Data.Entities.EnquiryRequestLog instance);
    partial void InsertResponseLog(Gateway.Data.Entities.ResponseLog instance);
    partial void UpdateResponseLog(Gateway.Data.Entities.ResponseLog instance);
    partial void DeleteResponseLog(Gateway.Data.Entities.ResponseLog instance);
    partial void InsertBranchGatewayProtocol(Gateway.Data.Entities.BranchGatewayProtocol instance);
    partial void UpdateBranchGatewayProtocol(Gateway.Data.Entities.BranchGatewayProtocol instance);
    partial void DeleteBranchGatewayProtocol(Gateway.Data.Entities.BranchGatewayProtocol instance);
    #endregion
		
		public GatewayDbContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["GatewayDBConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public GatewayDbContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GatewayDbContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GatewayDbContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GatewayDbContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Gateway.Data.Entities.ConversationLog> ConversationLogs
		{
			get
			{
				return this.GetTable<Gateway.Data.Entities.ConversationLog>();
			}
		}
		
		public System.Data.Linq.Table<Gateway.Data.Entities.EnquiryRequestLog> EnquiryRequestLogs
		{
			get
			{
				return this.GetTable<Gateway.Data.Entities.EnquiryRequestLog>();
			}
		}
		
		public System.Data.Linq.Table<Gateway.Data.Entities.ResponseLog> ResponseLogs
		{
			get
			{
				return this.GetTable<Gateway.Data.Entities.ResponseLog>();
			}
		}
		
		public System.Data.Linq.Table<Gateway.Data.Entities.BranchGatewayProtocol> BranchGatewayProtocols
		{
			get
			{
				return this.GetTable<Gateway.Data.Entities.BranchGatewayProtocol>();
			}
		}
	}
}
namespace Gateway.Data.Entities
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.ComponentModel;
	using System;
	
	
	[Table(Name="logs.ConversationLog")]
	public partial class ConversationLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ConversationId;
		
		private System.DateTime _Timestamp;
		
		private string _Day;
		
		private string _ResponseConversationId;
		
		private string _ClientApplicationName;
		
		private string _GatewayId;
		
		private string _ClientIP;
		
		private string _ServerIP;
		
		private string _StaffId;
		
		private bool _CachedResponse;
		
		private bool _ErrorsInResponse;
		
		private float _Duration;
		
		private EntitySet<EnquiryRequestLog> _EnquiryRequestLogs;
		
		private EntitySet<ResponseLog> _ResponseLogs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnConversationIdChanging(string value);
    partial void OnConversationIdChanged();
    partial void OnTimestampChanging(System.DateTime value);
    partial void OnTimestampChanged();
    partial void OnDayChanging(string value);
    partial void OnDayChanged();
    partial void OnResponseConversationIdChanging(string value);
    partial void OnResponseConversationIdChanged();
    partial void OnClientApplicationNameChanging(string value);
    partial void OnClientApplicationNameChanged();
    partial void OnGatewayIdChanging(string value);
    partial void OnGatewayIdChanged();
    partial void OnClientIPChanging(string value);
    partial void OnClientIPChanged();
    partial void OnServerIPChanging(string value);
    partial void OnServerIPChanged();
    partial void OnStaffIdChanging(string value);
    partial void OnStaffIdChanged();
    partial void OnCachedResponseChanging(bool value);
    partial void OnCachedResponseChanged();
    partial void OnErrorsInResponseChanging(bool value);
    partial void OnErrorsInResponseChanged();
    partial void OnDurationChanging(float value);
    partial void OnDurationChanged();
    #endregion
		
		public ConversationLog()
		{
			this._EnquiryRequestLogs = new EntitySet<EnquiryRequestLog>(new Action<EnquiryRequestLog>(this.attach_EnquiryRequestLogs), new Action<EnquiryRequestLog>(this.detach_EnquiryRequestLogs));
			this._ResponseLogs = new EntitySet<ResponseLog>(new Action<ResponseLog>(this.attach_ResponseLogs), new Action<ResponseLog>(this.detach_ResponseLogs));
			OnCreated();
		}
		
		[Column(Storage="_ConversationId", DbType="NChar(32) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ConversationId
		{
			get
			{
				return this._ConversationId;
			}
			set
			{
				if ((this._ConversationId != value))
				{
					this.OnConversationIdChanging(value);
					this.SendPropertyChanging();
					this._ConversationId = value;
					this.SendPropertyChanged("ConversationId");
					this.OnConversationIdChanged();
				}
			}
		}
		
		[Column(Storage="_Timestamp", DbType="DateTime NOT NULL")]
		public System.DateTime Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[Column(Storage="_Day", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string Day
		{
			get
			{
				return this._Day;
			}
			set
			{
				if ((this._Day != value))
				{
					this.OnDayChanging(value);
					this.SendPropertyChanging();
					this._Day = value;
					this.SendPropertyChanged("Day");
					this.OnDayChanged();
				}
			}
		}
		
		[Column(Storage="_ResponseConversationId", DbType="NChar(32) NOT NULL", CanBeNull=false)]
		public string ResponseConversationId
		{
			get
			{
				return this._ResponseConversationId;
			}
			set
			{
				if ((this._ResponseConversationId != value))
				{
					this.OnResponseConversationIdChanging(value);
					this.SendPropertyChanging();
					this._ResponseConversationId = value;
					this.SendPropertyChanged("ResponseConversationId");
					this.OnResponseConversationIdChanged();
				}
			}
		}
		
		[Column(Storage="_ClientApplicationName", DbType="NChar(32) NOT NULL", CanBeNull=false)]
		public string ClientApplicationName
		{
			get
			{
				return this._ClientApplicationName;
			}
			set
			{
				if ((this._ClientApplicationName != value))
				{
					this.OnClientApplicationNameChanging(value);
					this.SendPropertyChanging();
					this._ClientApplicationName = value;
					this.SendPropertyChanged("ClientApplicationName");
					this.OnClientApplicationNameChanged();
				}
			}
		}
		
		[Column(Storage="_GatewayId", DbType="NChar(5) NOT NULL", CanBeNull=false)]
		public string GatewayId
		{
			get
			{
				return this._GatewayId;
			}
			set
			{
				if ((this._GatewayId != value))
				{
					this.OnGatewayIdChanging(value);
					this.SendPropertyChanging();
					this._GatewayId = value;
					this.SendPropertyChanged("GatewayId");
					this.OnGatewayIdChanged();
				}
			}
		}
		
		[Column(Storage="_ClientIP", DbType="NChar(15) NOT NULL", CanBeNull=false)]
		public string ClientIP
		{
			get
			{
				return this._ClientIP;
			}
			set
			{
				if ((this._ClientIP != value))
				{
					this.OnClientIPChanging(value);
					this.SendPropertyChanging();
					this._ClientIP = value;
					this.SendPropertyChanged("ClientIP");
					this.OnClientIPChanged();
				}
			}
		}
		
		[Column(Storage="_ServerIP", DbType="NChar(15) NOT NULL", CanBeNull=false)]
		public string ServerIP
		{
			get
			{
				return this._ServerIP;
			}
			set
			{
				if ((this._ServerIP != value))
				{
					this.OnServerIPChanging(value);
					this.SendPropertyChanging();
					this._ServerIP = value;
					this.SendPropertyChanged("ServerIP");
					this.OnServerIPChanged();
				}
			}
		}
		
		[Column(Storage="_StaffId", DbType="NChar(32) NOT NULL", CanBeNull=false)]
		public string StaffId
		{
			get
			{
				return this._StaffId;
			}
			set
			{
				if ((this._StaffId != value))
				{
					this.OnStaffIdChanging(value);
					this.SendPropertyChanging();
					this._StaffId = value;
					this.SendPropertyChanged("StaffId");
					this.OnStaffIdChanged();
				}
			}
		}
		
		[Column(Storage="_CachedResponse", DbType="Bit NOT NULL")]
		public bool CachedResponse
		{
			get
			{
				return this._CachedResponse;
			}
			set
			{
				if ((this._CachedResponse != value))
				{
					this.OnCachedResponseChanging(value);
					this.SendPropertyChanging();
					this._CachedResponse = value;
					this.SendPropertyChanged("CachedResponse");
					this.OnCachedResponseChanged();
				}
			}
		}
		
		[Column(Storage="_ErrorsInResponse", DbType="Bit NOT NULL")]
		public bool ErrorsInResponse
		{
			get
			{
				return this._ErrorsInResponse;
			}
			set
			{
				if ((this._ErrorsInResponse != value))
				{
					this.OnErrorsInResponseChanging(value);
					this.SendPropertyChanging();
					this._ErrorsInResponse = value;
					this.SendPropertyChanged("ErrorsInResponse");
					this.OnErrorsInResponseChanged();
				}
			}
		}
		
		[Column(Storage="_Duration", DbType="Real NOT NULL")]
		public float Duration
		{
			get
			{
				return this._Duration;
			}
			set
			{
				if ((this._Duration != value))
				{
					this.OnDurationChanging(value);
					this.SendPropertyChanging();
					this._Duration = value;
					this.SendPropertyChanged("Duration");
					this.OnDurationChanged();
				}
			}
		}
		
		[Association(Name="ConversationLog_EnquiryRequestLog", Storage="_EnquiryRequestLogs", ThisKey="ConversationId", OtherKey="ConversationId")]
		public EntitySet<EnquiryRequestLog> EnquiryRequestLogs
		{
			get
			{
				return this._EnquiryRequestLogs;
			}
			set
			{
				this._EnquiryRequestLogs.Assign(value);
			}
		}
		
		[Association(Name="ConversationLog_ResponseLog", Storage="_ResponseLogs", ThisKey="ConversationId", OtherKey="ConversationId")]
		public EntitySet<ResponseLog> ResponseLogs
		{
			get
			{
				return this._ResponseLogs;
			}
			set
			{
				this._ResponseLogs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EnquiryRequestLogs(EnquiryRequestLog entity)
		{
			this.SendPropertyChanging();
			entity.ConversationLog = this;
		}
		
		private void detach_EnquiryRequestLogs(EnquiryRequestLog entity)
		{
			this.SendPropertyChanging();
			entity.ConversationLog = null;
		}
		
		private void attach_ResponseLogs(ResponseLog entity)
		{
			this.SendPropertyChanging();
			entity.ConversationLog = this;
		}
		
		private void detach_ResponseLogs(ResponseLog entity)
		{
			this.SendPropertyChanging();
			entity.ConversationLog = null;
		}
	}
	
	[Table(Name="logs.EnquiryRequestLog")]
	public partial class EnquiryRequestLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _ConversationId;
		
		private int _SequenceNo;
		
		private string _RequestId;
		
		private string _FinancialInstitution;
		
		private string _SourceType;
		
		private string _Branch;
		
		private string _SubOffice;
		
		private string _Username;
		
		private string _Data;
		
		private EntityRef<ConversationLog> _ConversationLog;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnConversationIdChanging(string value);
    partial void OnConversationIdChanged();
    partial void OnSequenceNoChanging(int value);
    partial void OnSequenceNoChanged();
    partial void OnRequestIdChanging(string value);
    partial void OnRequestIdChanged();
    partial void OnFinancialInstitutionChanging(string value);
    partial void OnFinancialInstitutionChanged();
    partial void OnSourceTypeChanging(string value);
    partial void OnSourceTypeChanged();
    partial void OnBranchChanging(string value);
    partial void OnBranchChanged();
    partial void OnSubOfficeChanging(string value);
    partial void OnSubOfficeChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnDataChanging(string value);
    partial void OnDataChanged();
    #endregion
		
		public EnquiryRequestLog()
		{
			this._ConversationLog = default(EntityRef<ConversationLog>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_ConversationId", DbType="NChar(32) NOT NULL", CanBeNull=false)]
		public string ConversationId
		{
			get
			{
				return this._ConversationId;
			}
			set
			{
				if ((this._ConversationId != value))
				{
					if (this._ConversationLog.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnConversationIdChanging(value);
					this.SendPropertyChanging();
					this._ConversationId = value;
					this.SendPropertyChanged("ConversationId");
					this.OnConversationIdChanged();
				}
			}
		}
		
		[Column(Storage="_SequenceNo", DbType="Int NOT NULL")]
		public int SequenceNo
		{
			get
			{
				return this._SequenceNo;
			}
			set
			{
				if ((this._SequenceNo != value))
				{
					this.OnSequenceNoChanging(value);
					this.SendPropertyChanging();
					this._SequenceNo = value;
					this.SendPropertyChanged("SequenceNo");
					this.OnSequenceNoChanged();
				}
			}
		}
		
		[Column(Storage="_RequestId", DbType="NChar(5) NOT NULL", CanBeNull=false)]
		public string RequestId
		{
			get
			{
				return this._RequestId;
			}
			set
			{
				if ((this._RequestId != value))
				{
					this.OnRequestIdChanging(value);
					this.SendPropertyChanging();
					this._RequestId = value;
					this.SendPropertyChanged("RequestId");
					this.OnRequestIdChanged();
				}
			}
		}
		
		[Column(Storage="_FinancialInstitution", DbType="NChar(3) NOT NULL", CanBeNull=false)]
		public string FinancialInstitution
		{
			get
			{
				return this._FinancialInstitution;
			}
			set
			{
				if ((this._FinancialInstitution != value))
				{
					this.OnFinancialInstitutionChanging(value);
					this.SendPropertyChanging();
					this._FinancialInstitution = value;
					this.SendPropertyChanged("FinancialInstitution");
					this.OnFinancialInstitutionChanged();
				}
			}
		}
		
		[Column(Storage="_SourceType", DbType="NChar(3) NOT NULL", CanBeNull=false)]
		public string SourceType
		{
			get
			{
				return this._SourceType;
			}
			set
			{
				if ((this._SourceType != value))
				{
					this.OnSourceTypeChanging(value);
					this.SendPropertyChanging();
					this._SourceType = value;
					this.SendPropertyChanged("SourceType");
					this.OnSourceTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Branch", DbType="NChar(6) NOT NULL", CanBeNull=false)]
		public string Branch
		{
			get
			{
				return this._Branch;
			}
			set
			{
				if ((this._Branch != value))
				{
					this.OnBranchChanging(value);
					this.SendPropertyChanging();
					this._Branch = value;
					this.SendPropertyChanged("Branch");
					this.OnBranchChanged();
				}
			}
		}
		
		[Column(Storage="_SubOffice", DbType="NChar(2) NOT NULL", CanBeNull=false)]
		public string SubOffice
		{
			get
			{
				return this._SubOffice;
			}
			set
			{
				if ((this._SubOffice != value))
				{
					this.OnSubOfficeChanging(value);
					this.SendPropertyChanging();
					this._SubOffice = value;
					this.SendPropertyChanged("SubOffice");
					this.OnSubOfficeChanged();
				}
			}
		}
		
		[Column(Storage="_Username", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[Column(Storage="_Data", DbType="NChar(490) NOT NULL", CanBeNull=false)]
		public string Data
		{
			get
			{
				return this._Data;
			}
			set
			{
				if ((this._Data != value))
				{
					this.OnDataChanging(value);
					this.SendPropertyChanging();
					this._Data = value;
					this.SendPropertyChanged("Data");
					this.OnDataChanged();
				}
			}
		}
		
		[Association(Name="ConversationLog_EnquiryRequestLog", Storage="_ConversationLog", ThisKey="ConversationId", OtherKey="ConversationId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ConversationLog ConversationLog
		{
			get
			{
				return this._ConversationLog.Entity;
			}
			set
			{
				ConversationLog previousValue = this._ConversationLog.Entity;
				if (((previousValue != value) 
							|| (this._ConversationLog.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ConversationLog.Entity = null;
						previousValue.EnquiryRequestLogs.Remove(this);
					}
					this._ConversationLog.Entity = value;
					if ((value != null))
					{
						value.EnquiryRequestLogs.Add(this);
						this._ConversationId = value.ConversationId;
					}
					else
					{
						this._ConversationId = default(string);
					}
					this.SendPropertyChanged("ConversationLog");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="logs.ResponseLog")]
	public partial class ResponseLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _ConversationId;
		
		private int _SequenceNo;
		
		private string _Data;
		
		private EntityRef<ConversationLog> _ConversationLog;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnConversationIdChanging(string value);
    partial void OnConversationIdChanged();
    partial void OnSequenceNoChanging(int value);
    partial void OnSequenceNoChanged();
    partial void OnDataChanging(string value);
    partial void OnDataChanged();
    #endregion
		
		public ResponseLog()
		{
			this._ConversationLog = default(EntityRef<ConversationLog>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_ConversationId", DbType="NChar(32) NOT NULL", CanBeNull=false)]
		public string ConversationId
		{
			get
			{
				return this._ConversationId;
			}
			set
			{
				if ((this._ConversationId != value))
				{
					if (this._ConversationLog.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnConversationIdChanging(value);
					this.SendPropertyChanging();
					this._ConversationId = value;
					this.SendPropertyChanged("ConversationId");
					this.OnConversationIdChanged();
				}
			}
		}
		
		[Column(Storage="_SequenceNo", DbType="Int NOT NULL")]
		public int SequenceNo
		{
			get
			{
				return this._SequenceNo;
			}
			set
			{
				if ((this._SequenceNo != value))
				{
					this.OnSequenceNoChanging(value);
					this.SendPropertyChanging();
					this._SequenceNo = value;
					this.SendPropertyChanged("SequenceNo");
					this.OnSequenceNoChanged();
				}
			}
		}
		
		[Column(Storage="_Data", DbType="NChar(512) NOT NULL", CanBeNull=false)]
		public string Data
		{
			get
			{
				return this._Data;
			}
			set
			{
				if ((this._Data != value))
				{
					this.OnDataChanging(value);
					this.SendPropertyChanging();
					this._Data = value;
					this.SendPropertyChanged("Data");
					this.OnDataChanged();
				}
			}
		}
		
		[Association(Name="ConversationLog_ResponseLog", Storage="_ConversationLog", ThisKey="ConversationId", OtherKey="ConversationId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ConversationLog ConversationLog
		{
			get
			{
				return this._ConversationLog.Entity;
			}
			set
			{
				ConversationLog previousValue = this._ConversationLog.Entity;
				if (((previousValue != value) 
							|| (this._ConversationLog.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ConversationLog.Entity = null;
						previousValue.ResponseLogs.Remove(this);
					}
					this._ConversationLog.Entity = value;
					if ((value != null))
					{
						value.ResponseLogs.Add(this);
						this._ConversationId = value.ConversationId;
					}
					else
					{
						this._ConversationId = default(string);
					}
					this.SendPropertyChanged("ConversationLog");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="config.BranchGatewayProtocol")]
	public partial class BranchGatewayProtocol : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _ClientApplicationName;
		
		private string _GatewayId;
		
		private string _FinancialInstitution;
		
		private string _SourceType;
		
		private string _Branch;
		
		private string _SubOffice;
		
		private string _Protocol;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnClientApplicationNameChanging(string value);
    partial void OnClientApplicationNameChanged();
    partial void OnGatewayIdChanging(string value);
    partial void OnGatewayIdChanged();
    partial void OnFinancialInstitutionChanging(string value);
    partial void OnFinancialInstitutionChanged();
    partial void OnSourceTypeChanging(string value);
    partial void OnSourceTypeChanged();
    partial void OnBranchChanging(string value);
    partial void OnBranchChanged();
    partial void OnSubOfficeChanging(string value);
    partial void OnSubOfficeChanged();
    partial void OnProtocolChanging(string value);
    partial void OnProtocolChanged();
    #endregion
		
		public BranchGatewayProtocol()
		{
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_ClientApplicationName", DbType="NChar(32) NOT NULL", CanBeNull=false)]
		public string ClientApplicationName
		{
			get
			{
				return this._ClientApplicationName;
			}
			set
			{
				if ((this._ClientApplicationName != value))
				{
					this.OnClientApplicationNameChanging(value);
					this.SendPropertyChanging();
					this._ClientApplicationName = value;
					this.SendPropertyChanged("ClientApplicationName");
					this.OnClientApplicationNameChanged();
				}
			}
		}
		
		[Column(Storage="_GatewayId", DbType="NChar(5) NOT NULL", CanBeNull=false)]
		public string GatewayId
		{
			get
			{
				return this._GatewayId;
			}
			set
			{
				if ((this._GatewayId != value))
				{
					this.OnGatewayIdChanging(value);
					this.SendPropertyChanging();
					this._GatewayId = value;
					this.SendPropertyChanged("GatewayId");
					this.OnGatewayIdChanged();
				}
			}
		}
		
		[Column(Storage="_FinancialInstitution", DbType="NChar(3) NOT NULL", CanBeNull=false)]
		public string FinancialInstitution
		{
			get
			{
				return this._FinancialInstitution;
			}
			set
			{
				if ((this._FinancialInstitution != value))
				{
					this.OnFinancialInstitutionChanging(value);
					this.SendPropertyChanging();
					this._FinancialInstitution = value;
					this.SendPropertyChanged("FinancialInstitution");
					this.OnFinancialInstitutionChanged();
				}
			}
		}
		
		[Column(Storage="_SourceType", DbType="NChar(3) NOT NULL", CanBeNull=false)]
		public string SourceType
		{
			get
			{
				return this._SourceType;
			}
			set
			{
				if ((this._SourceType != value))
				{
					this.OnSourceTypeChanging(value);
					this.SendPropertyChanging();
					this._SourceType = value;
					this.SendPropertyChanged("SourceType");
					this.OnSourceTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Branch", DbType="NChar(6) NOT NULL", CanBeNull=false)]
		public string Branch
		{
			get
			{
				return this._Branch;
			}
			set
			{
				if ((this._Branch != value))
				{
					this.OnBranchChanging(value);
					this.SendPropertyChanging();
					this._Branch = value;
					this.SendPropertyChanged("Branch");
					this.OnBranchChanged();
				}
			}
		}
		
		[Column(Storage="_SubOffice", DbType="NChar(2) NOT NULL", CanBeNull=false)]
		public string SubOffice
		{
			get
			{
				return this._SubOffice;
			}
			set
			{
				if ((this._SubOffice != value))
				{
					this.OnSubOfficeChanging(value);
					this.SendPropertyChanging();
					this._SubOffice = value;
					this.SendPropertyChanged("SubOffice");
					this.OnSubOfficeChanged();
				}
			}
		}
		
		[Column(Storage="_Protocol", DbType="NChar(4) NOT NULL", CanBeNull=false)]
		public string Protocol
		{
			get
			{
				return this._Protocol;
			}
			set
			{
				if ((this._Protocol != value))
				{
					this.OnProtocolChanging(value);
					this.SendPropertyChanging();
					this._Protocol = value;
					this.SendPropertyChanged("Protocol");
					this.OnProtocolChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
